import startingPlatforms from '../platforms-all'
import settings from '../settings'
import {processPageJson, processBlockJson} from '../utilities/processing'


export default {
    state() {
        return {
            //Json from initial import; might not be needed. 
            initializedJsonString: '',

            // stores the complete JSON. All json elements should be access with getters,
            // rather then keeping separates properties for blocks etc. 
            currentPageJson: {},

            //json generated by block creator
            worksetArray: [],

            //template state
            activeTemplateIndex: -1,
            platforms: startingPlatforms,
            activePlatform: null,
            allBlockSettings: settings,

            //state for fotoscapes obj
            apiContent: {}
        }

    },
    getters: {
        currentPageJsonToString(state) {
            return JSON.stringify(state.currentPageJson);
        },
        currentBlocksJson(state) {
            return state.currentPageJson.blocks;
        },
        currentWorkset(state){
            return state.worksetArray; 
        }



    },
    mutations: {
        setFullJson(state, newJson) {
            let clone = JSON.parse(JSON.stringify(newJson)); 
            state.currentPageJson = clone; 
        },

        setBlocksJson(state, newBlocks) {
            state.currentPageJson.blocks = newBlocks;
        },
        setWorkset(state, newWorkset){
            state.worksetArray = newWorkset; 
        }, 

        replaceBlock(state, newBlock){
            state.currentPageJson.blocks[newBlock.index] = newBlock.block; 
        },
        pushToWorkset(state, processedBlock){
            state.worksetArray.push(processedBlock);
        },

    },
    actions: {
        submitPageJson(context, pageJson) {
            //Clean up platforms, fotoscape category, etc. before setting the pageJson in the store.
            let cleanPage = processPageJson(pageJson); 

            context.commit('setFullJson', cleanPage);
            context.commit('setBlocksJson', cleanPage.blocks);
        },
        replaceBlock(context, newBlock){
            context.commit('replaceBlock', newBlock);
        },

        createBlock(context, blockJson){
            const processedBlock = processBlockJson(blockJson)
            context.commit('pushToWorkset', processedBlock); 
        },

        //deleteBlock takes an id and filters all blockLists by that id.
        deleteBlock(context, id){
            const updatedBlockList = context.getters.currentBlocksJson.filter(block=>block.id!=id);
            context.commit('setBlocksJson', updatedBlockList); 
            const updatedWorkset = context.getters.currentWorkset.filter(block=> block.id != id); 


            context.commit('setWorkset', updatedWorkset); 
        }


    }

}