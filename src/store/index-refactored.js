import startingPlatforms from '../platforms-all'
import settings from '../settings'
import {processPageJson} from '../utilities/processing'


export default {
    state() {
        return {
            //Json from initial import; might not be needed. 
            initializedJsonString: '',

            // stores the complete JSON. All json elements should be access with getters,
            // rather then keeping separates properties for blocks etc. 
            currentPageJson: {},

            //json generated by block creator
            createdBlocksArray: [],

            //template state
            activeTemplateIndex: -1,
            platforms: startingPlatforms,
            activePlatform: null,
            allBlockSettings: settings,

            //state for fotoscapes obj
            apiContent: {}
        }

    },
    getters: {
        currentPageJsonToString(state) {
            return JSON.stringify(state.currentPageJson);
        },
        currentBlocksJson(state) {
            return state.currentPageJson.blocks;
        }



    },
    mutations: {
        setFullJson(state, newJson) {
            let clone = JSON.parse(JSON.stringify(newJson)); 
            state.currentPageJson = clone; 
        },
        setBlocksJson(state, newBlocks) {
            state.currentPageJson.blocks = newBlocks;
        }

    },
    actions: {
        submitPageJson(context, pageJson) {
            //Clean up platforms, fotoscape category, etc. before setting the pageJson in the store.
            let cleanPage = processPageJson(pageJson); 

            context.commit('setFullJson', cleanPage);
            context.commit('setBlocksJson', cleanPage.blocks);
        }


    }

}