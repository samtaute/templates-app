
import { createStore } from 'vuex'
import startingPlatforms from '../models/platforms-all'
import settings from '../models/settings'
import { processPageJson, processBlockJson } from '../utilities/processing'

const store = createStore({
    state() {
        return {
            //Json from initial import; might not be needed. 
            initializedJsonString: '',

            // stores the complete JSON. All json elements should be access with getters,
            // rather then keeping separates properties for blocks etc. 
            currentPageJson: {},

            //json generated by block creator
            worksetArray: [],

            //template state
            platforms: startingPlatforms,
            platformsFilterArray: [],

            activePlatform: 'ALL',
            allBlockSettings: settings,

            //state for fotoscapes obj
            apiContent: {}
        }

    },
    getters: {
        currentPageJsonToString(state) {
            return JSON.stringify(state.currentPageJson, (key, value) => {
                if (key === 'id') {
                    return '';
                }
                else return value
            }, "\t");
        },
        currentBlocksJson(state) {
            if (state.currentPageJson.blocks) {
                return state.currentPageJson.blocks;
            }
            else return []
        },
        currentWorkset(state) {
            return state.worksetArray;
        },
        platformsFilterArray(state) {
            let array = state.platformsFilterArray;
            return [...array]
        },
        activePlatform(state) {
            return state.activePlatform;
        },

        allPlatforms(state) {
            let products = Object.keys(state.platforms);

            let returnArray = [];

            for (let prod of products) {
                returnArray = returnArray.concat(state.platforms[prod]);
            }
            return returnArray;
        },


    },
    mutations: {
        setFullJson(state, newJson) {
            let clone = JSON.parse(JSON.stringify(newJson));
            state.currentPageJson = clone;
        },

        setBlocksJson(state, newBlocks) {
            state.currentPageJson.blocks = newBlocks;
        },
        setWorkset(state, newWorkset) {
            state.worksetArray = newWorkset;
        },

        //payload includes id and block keys.
        replaceBlock(state, payload) {
            for (let block of state.worksetArray) {
                if (block.id === payload.id) {
                    block = payload.block;
                }
            }
            for (let block of state.currentPageJson.blocks) {
                if (block.id === payload.id) {
                    block = payload.block;
                }
            }
        },


        //Update block arrays
        pushToWorkset(state, processedBlock) {
            state.worksetArray.push(processedBlock);
        },
        pushToPlatformsFilterArray(state, platform) {
            state.platformsFilterArray.push(platform);
        },
        removeFromPlatformsFilterArray(state, platform) {
            state.platformsFilterArray = state.platformsFilterArray.filter(plat => plat != platform)
        },

        activatePlatform(state, platform) {
            state.activePlatform = platform;
        },

    },
    actions: {
        submitPageJson(context, pageJson) {
            //Clean up platforms, fotoscape category, etc. before setting the pageJson in the store.
            let cleanPage = processPageJson(pageJson);

            context.commit('setFullJson', cleanPage);
            context.commit('setBlocksJson', cleanPage.blocks);
        },
        //payload includes id, block fields
        replaceBlock(context, payload) {
            context.commit('replaceBlock', payload);
        },

        //takes block json, processes it, and pushes it to the workset
        createBlock(context, blockJson) {
            const processedBlock = processBlockJson(blockJson)
            context.commit('pushToWorkset', processedBlock);
        },

        //deleteBlock takes an id and filters all blockLists by that id.
        deleteBlock(context, id) {
            const updatedBlockList = context.getters.currentBlocksJson.filter(block => block.id != id);
            context.commit('setBlocksJson', updatedBlockList);
            const updatedWorkset = context.getters.currentWorkset.filter(block => block.id != id);


            context.commit('setWorkset', updatedWorkset);
        },


        //Template actions

        //Takes a string such as "cricket" as its payload and forwards it to the activatePlatform mutation.
        activatePlatform(context, platform) {
            context.commit('activatePlatform', platform)
        },


        //Used when removing a platform from TemplateBlockPlatforms to check whether platform being removed should also be removed from the platformsFilterArray
        checkFilterArray(context, platform) {
            for (let block of context.getters.currentBlocksJson) {
                if (block.platforms && block.platforms.includes(platform)) {
                    return
                }
                if (block.excludePlatforms && block.excludePlatforms.includes(platform)) {
                    return
                }
            }
            context.commit('removeFromPlatformsFilterArray', platform)
        },


    }

}


);

export default store;

